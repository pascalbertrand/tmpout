                                                            ┌───────────────────────┐
                                                            ▄▄▄▄▄ ▄▄▄▄▄ ▄▄▄▄▄       │
                                                            │ █   █ █ █ █   █       │
                                                            │ █   █ █ █ █▀▀▀▀       │
                                                            │ █   █   █ █     ▄     │
                                                            │                 ▄▄▄▄▄ │
                                                            │                 █   █ │
                                                            │                 █   █ │
                                                            │                 █▄▄▄█ │
                                                            │                 ▄   ▄ │
                                                            │                 █   █ │
                                                            │                 █   █ │
                                                            │                 █▄▄▄█ │
                                                            │                 ▄▄▄▄▄ │
                                                            │                   █   │
La Technique De False-Disassembly Polymorphique             │                   █   │
~ S01den                                                    └───────────────────█ ──┘

Ecrit avec amour par S01den, de l'équipe tmp.out !
mail: S01den@protonmail.com

--- Introduction ---

Quand j'écrivais Lin32.Bakunin[0], je me demandais comment le rendre plus intéressant qu'un simple virus en assembleur mips qui imprime des trucs idiots. Je voulais faire chier les reverseurs. Donc, je me suis souvenu de la technique de false-disassembly que j'ai implémenté dans certains de mes crackmes.

Parce que le polymorphisme est cool, je voulais savoir s'il était possible de créer quelque chose d'intéressant en le mélangeant avec un false-disassembly d'une manière ou d'une autre.

La réponse est oui, et j'ai appelé (je ne sais pas si c'est une technique nouvelle ou non) cette astuce "false-disassembly polymorphique" ou simplement "Faux polymorphisme".

--- Comment est-ce que le false-disassembly fonctionne? ---

Cette technique est vraiment simple à comprendre et à mettre en œuvre.
Je l'ai découvert dans le célèbre article de Silvio Cesare[1] sur les techniques d'anti-débogage et de reversing Linux.
Il vous suffit de mettre quelques octets qui démarrent normalement une instruction avant votre code d'assemblage, comme ça:

-------------------- coupez ici --------------------
hey:                      hey:
   xor %rbx, %rbx             .ascii "\x48\x31"
   jmp yo            ====>     xor %rbx, %rbx
                               jmp yo
----------------------------------------------------

Maintenant, si nous regardons le code désassemblé de ces deux codes, nous aurions quelque chose comme ceci (radare2 ftw):

-------------------- coupez ici --------------------
;-- hey:
0x00401002      4831db         xor rbx, rbx
0x00401005      eb02           jmp 0x401009

                     ||
                     \/
;-- hey:
0x00401002      48314831       xor qword [rax + 0x31], rcx
0x00401006      dbeb           fucomi st(3)
0x00401008      026631         add ah, byte [rsi + 0x31]

----------------------------------------------------

Pourquoi le désassembleur se comporte-t-il comme cela?

Eh bien, normalement \x48\x31 démarre une instruction xor[2], les octets suivants définissent généralement les registres de l'opération.

Donc ces octets "d'initialisation" collent aux octets qui suivent, qui sont eux-mêmes des octets "d'initialisation", et le désassembleur les interprétera comme des octets "registres" et affichera des bêtises au lieu des instructions correctes!

Par conséquent, pour exécuter un tel code, il faut jumper par-dessus les octets "d'initialisation" que nous avons mis.
Vous devriez obtenir quelque chose comme ceci:

-------------------- coupez ici --------------------
_start:
jmp hey+2

hey:
   .ascii "\x48\x31"
   xor %rbx, %rbx
   jmp yo
----------------------------------------------------

--- C0de complet ---

Maintenant, imaginez que vous puissiez changer aléatoirement les octets qui provoquent le false-disassembly à chaque exécution ou infection, le code désassemblé changerait aussi et le reverseur croirait que le code est polymorphe alors que seuls quelques octets changent vraiment ...

Et maintenant, sans plus tarder, le code complet.

-------------------- coupez ici --------------------
# build cmd: as Linux.FakePolymorphism.asm -o fakePoly.o ; ld fakePoly.o -o fakePoly

# this code is a fake polymorphic example, feel free to try/use/whatever it!
# It grabs itself its code, modify the fake-disassembly bytes and put the result
# on the stack.

.text
  .global _start

_start:
jmp true_start+2 # jump over the fake-disassembly bytes

true_start:
.ascii "\x48\x31"  # fake-disassembly bytes
xor %rbx, %rbx
jmp get_code+2 # jump over the fake-disassembly bytes

get_code:
  .ascii "\x66\x31"  # fake-disassembly bytes
  call get_rip
  sub $0x10 ,%rax # 0x10 is the number of bytes between _start abd this instruction
  movb (%rax,%rbx), %al
  movb %al, (%rsp,%rbx)
  inc %rbx
  cmp $0x54, %rbx  # 0x54 is the total size of this code
  jne get_code+2

  # Pseudo RNG thanks to the time stamp counter
  rdtsc
  xor $0xdead, %rax
  mov %ax, 2(%rsp)
  xor $0xbeef, %rdx
  mov %ax, 9(%rsp)

  mov $60, %rax
  mov $0, %rdi
  syscall # sys_exit

get_rip:
  mov (%rsp), %rax
  ret
----------------------------------------------------

-- Conclusion --

J'espère que cet article vous a plu et que vous essaierez d'implémenter cette technique dans vos crackmes ou virus!

Avec sblip, nous avons écrit un virus polymorphe (Lin64.Eng3ls, lisez l'article et le code!) qui utilise cette technique pour obfusquer son décrypteur.

Le code du décrypteur:
------- coupez ici -------
  pop rcx
  jmp jmp_over+2
  jmp_over:
    db `\x48\x31` ; false disassembly
    mov al,0x00
    xor rdx, rdx

  decoder:
    jmp jmp_over2+2

    jmp_over2:
      db `\xb8\xd9` ; false disassembly
      mov dl, byte [r12+rdi]
      cmp rdi, STUB_SIZE-1
      jna no_decrypt

      jmp jmp_over3+2
      jmp_over3:
        db `\x48\x81` ; false disassembly
        xor dl, al

  no_decrypt:
    mov byte [rbx+rdi], dl
    inc rdi
  loop decoder
--------------------------

Voici quelques décrypteurs[3] désassembler à partir de binaires infectés, voyons l'astuce en action:

1. 
  0x0c003f46      59             pop rcx                 
  0x0c003f47      eb02           jmp 0xc003f4b           
  0x0c003f49      00d6           add dh, dl              
  0x0c003f4b      b06d           mov al, 0x6d            
  0x0c003f4d      4831d2         xor rdx, rdx            
  0x0c003f50      eb02           jmp 0xc003f54           
  0x0c003f52      1aca           sbb cl, dl              
  0x0c003f54      418a143c       mov dl, byte [r12 + rdi]
  0x0c003f58      4881ff870000.  cmp rdi, 0x87           
  0x0c003f5f      7606           jbe 0xc003f67           
  0x0c003f61      eb02           jmp 0xc003f65           
  0x0c003f63      c0d630         rcl dh, 0x30            
  0x0c003f66      c28814         ret 0x1488              
  0x0c003f69      3b48ff         cmp ecx, dword [rax - 1]
  0x0c003f6c      c7             invalid                 
  0x0c003f6d      e2e1           loop 0xc003f50          

2.
  0x0c003fe6      59             pop rcx
  0x0c003fe7      eb02           jmp 0xc003feb
  0x0c003fe9      ce             invalid
  0x0c003fea      0ab0a34831d2   or dh, byte [rax - 0x2dceb75d]
  0x0c003ff0      eb02           jmp 0xc003ff4
  0x0c003ff2      39cb           cmp ebx, ecx
  0x0c003ff4      418a143c       mov dl, byte [r12 + rdi]
  0x0c003ff8      4881ff870000.  cmp rdi, 0x87
  0x0c003fff      7606           jbe 0xc004007
  0x0c004003      0e             invalid
  0x0c004004      0a30           or dh, byte [rax]
  0x0c004006      c28814         ret 0x1488
  0x0c004009      3b48ff         cmp ecx, dword [rax - 1]
  0x0c00400c      c7             invalid
  0x0c00400d      e2e1           loop 0xc003ff0

Le résultat est vraiment différent du code original.

--- Notes and Références ---
[0] https://vx-underground.org/papers/VXUG
      /Exclusive/Bakounin/Writing_virus_in_MIPS_assembly_for_fun.txt
[1] http://www.ouah.org/linux-anti-debugging.txt // the silvio's paper
[2] https://www.felixcloutier.com/x86/xor
[3] With radare2
